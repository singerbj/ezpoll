rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /polls/{pollid}/{documents=**} {

      function question() {
        return request.resource.data.question;
      }

      function answers() {
        return request.resource.data.answers;
      }

      function isValidQuestion() {
        return question() is string
            && question().size() > 0
            && question().size() <= 100;
      }

      function isValidAnswer(answerIndex) {
        return answers()[answerIndex] is string
            && answers()[answerIndex].size() > 0
            && answers()[answerIndex].size() <= 100;
      }

      function isValidOptionalAnswer(answerIndex) {
        return !(answerIndex in answers()) || isValidAnswer(answerIndex);
      }

      function allowWriteOrUpdate(){
        return request.auth != null
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["lastVote", "votes"])
          && request.resource.data.lastVote is number
          && request.resource.data.votes[request.auth.uid] is number
          && request.resource.data.votes.diff(resource.data.votes).affectedKeys().hasOnly([request.auth.uid])
          && request.resource.data.votes[request.auth.uid] >= 0
          && request.resource.data.votes[request.auth.uid] < 10
      }

      allow read: if request.auth != null
      allow write: if allowWriteOrUpdate()
      allow create: if request.auth != null
        && isValidQuestion()
        && answers().size() >= 1
        && answers().size() <= 10
        && isValidAnswer("0")
        && isValidAnswer("1")
        && isValidOptionalAnswer("2")
        && isValidOptionalAnswer("3")
        && isValidOptionalAnswer("4")
        && isValidOptionalAnswer("5")
        && isValidOptionalAnswer("6")
        && isValidOptionalAnswer("7")
        && isValidOptionalAnswer("8")
        && isValidOptionalAnswer("9");
      allow update: if allowWriteOrUpdate()
      allow delete: if false
    }
  }
}